-- SCRIPT PARA CRIAÇÃO DO BANCO DE DADOS --
-- -- -- -- -- -- -- -- -- -- E-COMMERCE --

CREATE DATABASE ECOMMERCE;
USE ECOMMERCE;

CREATE TABLE CLIENTS (
	ID_CLIENT INT AUTO_INCREMENT PRIMARY KEY,
	ID_CREDIT_CARD INT,
	FNAME VARCHAR(10) NOT NULL,
	MINIT CHAR(3) NOT NULL,
	LNAME VARCHAR(20) NOT NULL,
	CPF CHAR(11) UNIQUE NOT NULL,
	ADDRESS VARCHAR(255) NOT NULL,
	BIRTH_DATE DATE NOT NULL
);

ALTER TABLE CLIENTS AUTO_INCREMENT=1;

CREATE TABLE PRODUCTS (
  ID_PRODUCT INT AUTO_INCREMENT PRIMARY KEY,
  DESCRITION VARCHAR(100) NOT NULL,
  CLASSIFICATION_KIDS BOOL DEFAULT FALSE,
  CATEGORY ENUM('INFORMATICA', 'CASA', 'VESTUÁRIO', 'BRINQUEDO', 'ELETRONICO', 'OUTRA') NOT NULL,
  RATING ENUM('5', '4', '3', '2', '1','0'),
  PRICE FLOAT
);

ALTER TABLE PRODUCTS AUTO_INCREMENT=1;

CREATE TABLE PAYMENT_CASH (
  ID_PAYMENT_CASH INT AUTO_INCREMENT PRIMARY KEY,
  PAYMENT_CASH_NUMBER CHAR(48) UNIQUE NOT NULL,
  TERM DATE NOT NULL
);

ALTER TABLE PAYMENT_CASH AUTO_INCREMENT=1;

CREATE TABLE ORDERS (
  ID_ORDER INT AUTO_INCREMENT PRIMARY KEY,
  ID_CLIENT INT NOT NULL,
  ORDER_STATUS ENUM('EM PROCESSAMENTO', 'CONFIRMADO', 'CANCELADO') DEFAULT 'EM PROCESSAMENTO',
  ORDER_DESCRIPTION VARCHAR(255),
  SEND_PRICE FLOAT NOT NULL DEFAULT 13.99,
  PAYMENT_CASH BOOL DEFAULT FALSE,
  CONSTRAINT FK_ORDER_CLIENT FOREIGN KEY (ID_CLIENT) REFERENCES CLIENTS(ID_CLIENT)
);


ALTER TABLE ORDERS AUTO_INCREMENT=1;

CREATE TABLE PAYMENTS (
  ID_PAYMENT INT AUTO_INCREMENT,
  ID_ORDER INT NOT NULL,
  ID_PAYMENT_CASH INT,
  TYPE_PAYMENT ENUM('BOLETO', 'CARTÃO', 'DOIS CARTÕES') DEFAULT 'CARTÃO',
  PRIMARY KEY (ID_PAYMENT, ID_ORDER, ID_PAYMENT_CASH),
  CONSTRAINT FK_PAYMENT_1 FOREIGN KEY (ID_PAYMENT_CASH) REFERENCES PAYMENT_CASH(ID_PAYMENT_CASH),
  CONSTRAINT FK_PAYMENT_2 FOREIGN KEY (ID_ORDER) REFERENCES ORDERS(ID_ORDER)
);

ALTER TABLE PAYMENTS AUTO_INCREMENT=1;

CREATE TABLE CREDIT_CARD (
  ID_CREDIT_CARD INT AUTO_INCREMENT PRIMARY KEY,
  ID_CLIENT INT,
  FLAG ENUM('VISA', 'MASTERCARD', 'OUTRO') NOT NULL,
  CARD_NUMBER CHAR(16) UNIQUE NOT NULL,
  VALIDITY DATE NOT NULL,
  VERIFICATION_CODE CHAR(3) NOT NULL,
  CARDHOLDER_NAME VARCHAR(45) NOT NULL,
  CONSTRAINT FK_ID_CLIENT FOREIGN KEY (ID_CLIENT) REFERENCES CLIENTS(ID_CLIENT)
);

ALTER TABLE CREDIT_CARD AUTO_INCREMENT=1;


CREATE TABLE PAYMENT_CREDIT_CARD (
  ID_ORDER INT NOT NULL,
  ID_CREDIT_CARD INT,
  PRIMARY KEY (ID_ORDER, ID_CREDIT_CARD),
  CONSTRAINT FK_PAYMENT_CARD_1 FOREIGN KEY (ID_ORDER) REFERENCES PAYMENTS(ID_ORDER),
  CONSTRAINT FK_PAYMENT_CARD_2 FOREIGN KEY (ID_CREDIT_CARD) REFERENCES CREDIT_CARD(ID_CREDIT_CARD)
);

CREATE TABLE PRODUCT_STORAGE (
  ID_PROD_STORAGE INT AUTO_INCREMENT PRIMARY KEY,
  STORAGE_LOCATION VARCHAR(255),
  QUANTITY INT DEFAULT 0,
  RACK VARCHAR(20)
);

ALTER TABLE PRODUCT_STORAGE AUTO_INCREMENT=1;

CREATE TABLE SUPPLIER (
  ID_SUPPLIER INT AUTO_INCREMENT PRIMARY KEY,
  SOCIAL_NAME VARCHAR(255) NOT NULL,
  CNPJ CHAR(15) UNIQUE NOT NULL,
  CONTACT CHAR(11) NOT NULL,
  EMAIL VARCHAR(45) UNIQUE NOT NULL
);

ALTER TABLE SUPPLIER AUTO_INCREMENT=1;

CREATE TABLE SELLER (
  ID_SELLER INT AUTO_INCREMENT PRIMARY KEY,
  SOCIAL_NAME VARCHAR(255) NOT NULL,
  ABST_NAME VARCHAR(255),
  CNPJ CHAR(15) UNIQUE,
  CPF CHAR(9) UNIQUE,
  LOCATIONS VARCHAR(255),
  CONTACT CHAR(11) NOT NULL,
  EMAIL VARCHAR(45)
);

ALTER TABLE SELLER AUTO_INCREMENT=1;

CREATE TABLE PRODUCT_SELLER (
  ID_PSELLER INT,
  ID_PPRODUCT INT,
  PRODQUANTITY INT DEFAULT 1,
  PRIMARY KEY (ID_PSELLER, ID_PPRODUCT),
  CONSTRAINT FK_PRODUCT_SELLER FOREIGN KEY (ID_PSELLER) REFERENCES SELLER(ID_SELLER),
  CONSTRAINT FK_PRODUCT_PRODUCT FOREIGN KEY (ID_PPRODUCT) REFERENCES PRODUCTS(ID_PRODUCT)
);

CREATE TABLE PRODUCT_ORDER (
  ID_POPRODUCT INT,
  ID_POORDER INT,
  PO_QUANTITY INT DEFAULT 1,
  PO_STATUS ENUM('DISPONÍVEL', 'SEM ESTOQUE') DEFAULT 'DISPONÍVEL',
  CONSTRAINT FK_PRODUCTORDER_PRODUCT FOREIGN KEY (ID_POPRODUCT) REFERENCES PRODUCTS(ID_PRODUCT),
  CONSTRAINT FK_PRODUCTORDER_ORDER FOREIGN KEY (ID_POORDER) REFERENCES ORDERS(ID_ORDER)
);

CREATE TABLE STORAGE_LOCATION (
  ID_LPRODUCT INT,
  ID_LSTORAGE INT,
  LOCATION VARCHAR(255) NOT NULL,
  CONSTRAINT FK_STORAGE_LOCATION_PRODUCT FOREIGN KEY (ID_LPRODUCT) REFERENCES PRODUCTS(ID_PRODUCT),
  CONSTRAINT FK_STORAGE_LOCATION_STORAGE FOREIGN KEY (ID_LSTORAGE) REFERENCES PRODUCT_STORAGE(ID_PROD_STORAGE)
);

CREATE TABLE PRODUCT_SUPPLIER (
  ID_PSSUPPLIER INT,
  ID_PSPRODUCT INT,
  QUANTITY INT NOT NULL,
  CONSTRAINT FK_PRODUCT_SUPPLIER_SUPPLIER FOREIGN KEY (ID_PSSUPPLIER) REFERENCES SUPPLIER(ID_SUPPLIER),
  CONSTRAINT FK_PRODUCT_SUPPLIER_PRODCUT FOREIGN KEY (ID_PSPRODUCT) REFERENCES PRODUCTS(ID_PRODUCT)
);

CREATE TABLE BATCH (
  ID_BATCH INT AUTO_INCREMENT PRIMARY KEY,
  BATCH_NUMBER VARCHAR(255) NOT NULL,
  VALIDITY DATE,
  OBSERVATION VARCHAR(255)
);

ALTER TABLE BATCH AUTO_INCREMENT=1;

CREATE TABLE PRODUCT_BATCH (
  ID_PRODUCT INT,
  ID_BATCH INT,
  PRIMARY KEY(ID_PRODUCT, ID_BATCH),
  CONSTRAINT FK_PRODUCT_BATCH_1 FOREIGN KEY (ID_BATCH) REFERENCES BATCH(ID_BATCH),
  CONSTRAINT FK_PRODUCT_BATCH_2 FOREIGN KEY (ID_PRODUCT) REFERENCES PRODUCTS(ID_PRODUCT)
);


-- POPULANDO BANCO DE DADOS

-- Populando a tabela CLIENTS
INSERT INTO CLIENTS (ID_CREDIT_CARD, FNAME, MINIT, LNAME, CPF, ADDRESS, BIRTH_DATE)
VALUES
(1, 'João', 'A.', 'Silva', '12345678901', 'Rua Principal 123', '1990-05-15'),
(2, 'Maria', 'B.', 'Santos', '98765432102', 'Avenida Secundária 456', '1985-12-10'),
(3, 'Pedro', 'C.', 'Oliveira', '45678912303', 'Praça Central 789', '1998-08-25'),
(4, 'Ana', 'D.', 'Ferreira', '78912345604', 'Estrada Principal 567', '1980-03-02'),
(5, 'Carlos', 'E.', 'Gomes', '23456789005', 'Alameda dos Sonhos 890', '1995-09-17');

-- Populando a tabela PRODUCTS
INSERT INTO PRODUCTS (DESCRITION, CLASSIFICATION_KIDS, CATEGORY, RATING, PRICE)
VALUES
('Notebook', FALSE, 'INFORMATICA', '5', 999.99),
('Smartphone', FALSE, 'ELETRONICO', '4', 799.99),
('Camiseta', TRUE, 'VESTUÁRIO', '4', 29.99),
('Mouse', FALSE, 'INFORMATICA', '3', 19.99),
('Brinquedo de Pelúcia', TRUE, 'BRINQUEDO', '5', 12.99);

-- Populando a tabela PAYMENT_CASH
INSERT INTO PAYMENT_CASH (PAYMENT_CASH_NUMBER, TERM)
VALUES
('123456789012345678901234567890123456789012345678', '2023-09-01'),
('987654321098765432109876543210987654321098765432', '2023-10-01'),
('567890123045678901230456789012345678901234567890', '2023-11-01'),
('456789012345678901234567890123456789012345678901', '2023-12-01'),
('3456789012345678901234567890123456789012345678901', '2024-01-01');

-- Populando a tabela ORDERS
INSERT INTO ORDERS (ID_CLIENT, ORDER_STATUS, ORDER_DESCRIPTION, SEND_PRICE, PAYMENT_CASH)
VALUES
(1, 'EM PROCESSAMENTO', 'Pedido de teste 1', 13.99, FALSE),
(2, 'CONFIRMADO', 'Pedido de teste 2', 13.99, TRUE),
(3, 'EM PROCESSAMENTO', 'Pedido de teste 3', 13.99, FALSE),
(4, 'CANCELADO', 'Pedido de teste 4', 13.99, TRUE),
(5, 'CONFIRMADO', 'Pedido de teste 5', 13.99, FALSE);

-- Populando a tabela PAYMENTS
INSERT INTO PAYMENTS (ID_ORDER, TYPE_PAYMENT)
VALUES
(1, 'CARTÃO'),
(2, 'BOLETO'),
(3, 'CARTÃO'),
(4, 'BOLETO'),
(5, 'CARTÃO');

-- Populando a tabela CREDIT_CARD
INSERT INTO CREDIT_CARD (ID_CLIENT, FLAG, CARD_NUMBER, VALIDITY, VERIFICATION_CODE, CARDHOLDER_NAME)
VALUES
(1, 'VISA', '1234567890123456', '2023-12-31', '123', 'João A. Silva'),
(2, 'MASTERCARD', '9876543210987654', '2023-11-30', '456', 'Maria B. Santos'),
(3, 'VISA', '4567890123456789', '2023-10-31', '789', 'Pedro C. Oliveira'),
(4, 'MASTERCARD', '7890123456789012', '2023-09-30', '012', 'Ana D. Ferreira'),
(5, 'VISA', '2345678901234567', '2023-08-31', '345', 'Carlos E. Gomes');

-- Populando a tabela PAYMENT_CREDIT_CARD
INSERT INTO PAYMENT_CREDIT_CARD (ID_ORDER, ID_CREDIT_CARD)
VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

-- Populando a tabela PRODUCT_STORAGE
INSERT INTO PRODUCT_STORAGE (STORAGE_LOCATION, QUANTITY, RACK)
VALUES
('Estoque A', 100, 'Rack 1'),
('Estoque B', 75, 'Rack 2'),
('Estoque C', 50, 'Rack 3'),
('Estoque D', 125, 'Rack 4'),
('Estoque E', 200, 'Rack 5');

-- Populando a tabela SUPPLIER
INSERT INTO SUPPLIER (SOCIAL_NAME, CNPJ, CONTACT, EMAIL)
VALUES
('Fornecedor A', '12345678901234', '11987654321', 'fornecedorA@example.com'),
('Fornecedor B', '23456789012345', '21987654321', 'fornecedorB@example.com'),
('Fornecedor C', '34567890123456', '31987654321', 'fornecedorC@example.com'),
('Fornecedor D', '45678901234567', '41987654321', 'fornecedorD@example.com'),
('Fornecedor E', '56789012345678', '51987654321', 'fornecedorE@example.com');

-- Populando a tabela SELLER
INSERT INTO SELLER (SOCIAL_NAME, ABST_NAME, CNPJ, CPF, LOCATIONS, CONTACT, EMAIL)
VALUES
('Vendedor A', 'Vend. A.', '12345678901', '123456789', 'Loja 1', '11987654321', 'vendedorA@example.com'),
('Vendedor B', 'Vend. B.', '23456789012', '234567890', 'Loja 2', '21987654321', 'vendedorB@example.com'),
('Vendedor C', 'Vend. C.', '34567890123', '345678901', 'Loja 3', '31987654321', 'vendedorC@example.com'),
('Vendedor D', 'Vend. D.', '45678901234', '456789012', 'Loja 4', '41987654321', 'vendedorD@example.com'),
('Vendedor E', 'Vend. E.', '56789012345', '567890123', 'Loja 5', '51987654321', 'vendedorE@example.com');

-- Populando a tabela PRODUCT_SELLER
INSERT INTO PRODUCT_SELLER (ID_PSELLER, ID_PPRODUCT, PRODQUANTITY)
VALUES
(1, 1, 10),
(2, 2, 20),
(3, 3, 15),
(4, 4, 30),
(5, 5, 25);

-- Populando a tabela PRODUCT_ORDER
INSERT INTO PRODUCT_ORDER (ID_POPRODUCT, ID_POORDER, PO_QUANTITY, PO_STATUS)
VALUES
(1, 1, 10, 'DISPONÍVEL'),
(2, 2, 5, 'SEM ESTOQUE'),
(3, 3, 8, 'DISPONÍVEL'),
(4, 4, 0, 'SEM ESTOQUE'),
(5, 5, 12, 'DISPONÍVEL');

-- Populando a tabela STORAGE_LOCATION
INSERT INTO STORAGE_LOCATION (ID_LPRODUCT, ID_LSTORAGE, LOCATION)
VALUES
(1, 1, 'Estoque A, Rack 1'),
(2, 2, 'Estoque B, Rack 2'),
(3, 3, 'Estoque C, Rack 3'),
(4, 4, 'Estoque D, Rack 4'),
(5, 5, 'Estoque E, Rack 5');

-- Populando a tabela PRODUCT_SUPPLIER
INSERT INTO PRODUCT_SUPPLIER (ID_PSSUPPLIER, ID_PSPRODUCT, QUANTITY)
VALUES
(1, 1, 50),
(2, 2, 30),
(3, 3, 40),
(4, 4, 25),
(5, 5, 60);

-- Populando a tabela BATCH
INSERT INTO BATCH (BATCH_NUMBER, VALIDITY, OBSERVATION)
VALUES
('BATCH-001', '2023-12-31', 'Lote de teste 1'),
('BATCH-002', '2024-01-31', 'Lote de teste 2'),
('BATCH-003', '2024-02-28', 'Lote de teste 3'),
('BATCH-004', '2024-03-31', 'Lote de teste 4'),
('BATCH-005', '2024-04-30', 'Lote de teste 5');

-- Populando a tabela PRODUCT_BATCH
INSERT INTO PRODUCT_BATCH (ID_PRODUCT, ID_BATCH)
VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 4),
(5, 5);

-- EXECUTANDO TESTES

--  RESPONDENDO PERGUNTAS COM QUERIES SQL --
-- -- -- -- -- -- -- -- -- -- -- -- -- -- --

-- Quantos pedidos foram feitos por cada cliente?

SELECT ID_CLIENT, COUNT(*) AS NUMERO_DE_PEDIDOS
FROM ORDERS
GROUP BY ID_CLIENT;

-- Algum vendedor também é fornecedor?

SELECT S.SOCIAL_NAME AS NOME_VENDEDOR
FROM SELLER S
WHERE S.SOCIAL_NAME IN (
    SELECT SUP.SOCIAL_NAME
    FROM SUPPLIER SUP
);

-- Relação de produtos fornecedores e estoques;

SELECT
    P.ID_PRODUCT AS ID_PRODUTO,
    P.DESCRITION AS DESCRICAO_PRODUTO,
    S.SOCIAL_NAME AS FORNECEDOR,
    PS.QUANTITY AS QUANTIDADE_NO_ESTOQUE
FROM
    PRODUCTS P
INNER JOIN
    PRODUCT_SUPPLIER PS ON P.ID_PRODUCT = PS.ID_PSPRODUCT
INNER JOIN
    SUPPLIER S ON PS.ID_PSSUPPLIER = S.ID_SUPPLIER
LEFT JOIN
    PRODUCT_STORAGE ST ON P.ID_PRODUCT = ST.ID_LPRODUCT;

-- Relação de nomes dos fornecedores e nomes dos produtos;

SELECT
    S.SOCIAL_NAME AS FORNECEDOR,
    P.DESCRITION AS PRODUTO
FROM
    SUPPLIER S
INNER JOIN
    PRODUCT_SUPPLIER PS ON S.ID_SUPPLIER = PS.ID_PSSUPPLIER
INNER JOIN
    PRODUCTS P ON PS.ID_PSPRODUCT = P.ID_PRODUCT;


